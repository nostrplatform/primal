{"version":3,"file":"JFO5B7NF-4a51a11a.js","sources":["../../node_modules/@kobalte/core/dist/chunk/JFO5B7NF.jsx"],"sourcesContent":["import {\n  FORM_CONTROL_FIELD_PROP_NAMES,\n  createFormControlField\n} from \"./GIFDQEXV.jsx\";\nimport {\n  FORM_CONTROL_PROP_NAMES,\n  FormControlContext,\n  FormControlDescription,\n  FormControlErrorMessage,\n  FormControlLabel,\n  createFormControl,\n  useFormControlContext\n} from \"./PFCXKQPV.jsx\";\nimport {\n  createFormResetListener\n} from \"./QJIB6BDF.jsx\";\nimport {\n  createControllableSignal\n} from \"./FN6EICGO.jsx\";\nimport {\n  Polymorphic\n} from \"./E73PKFB3.jsx\";\nimport {\n  __export\n} from \"./5WXHJDCZ.jsx\";\n\n// src/text-field/index.tsx\nvar text_field_exports = {};\n__export(text_field_exports, {\n  Description: () => FormControlDescription,\n  ErrorMessage: () => FormControlErrorMessage,\n  Input: () => TextFieldInput,\n  Label: () => FormControlLabel,\n  Root: () => TextFieldRoot,\n  TextArea: () => TextFieldTextArea,\n  TextField: () => TextField\n});\n\n// src/text-field/text-field-input.tsx\nimport { composeEventHandlers, mergeDefaultProps } from \"@kobalte/utils\";\nimport { splitProps } from \"solid-js\";\n\n// src/text-field/text-field-context.tsx\nimport { createContext, useContext } from \"solid-js\";\nvar TextFieldContext = createContext();\nfunction useTextFieldContext() {\n  const context = useContext(TextFieldContext);\n  if (context === void 0) {\n    throw new Error(\n      \"[kobalte]: `useTextFieldContext` must be used within a `TextField` component\"\n    );\n  }\n  return context;\n}\n\n// src/text-field/text-field-input.tsx\nfunction TextFieldInput(props) {\n  return <TextFieldInputBase type=\"text\" {...props} />;\n}\nfunction TextFieldInputBase(props) {\n  const formControlContext = useFormControlContext();\n  const context = useTextFieldContext();\n  const mergedProps = mergeDefaultProps(\n    {\n      id: context.generateId(\"input\")\n    },\n    props\n  );\n  const [local, formControlFieldProps, others] = splitProps(\n    mergedProps,\n    [\"onInput\"],\n    FORM_CONTROL_FIELD_PROP_NAMES\n  );\n  const { fieldProps } = createFormControlField(formControlFieldProps);\n  return <Polymorphic\n    as=\"input\"\n    id={fieldProps.id()}\n    name={formControlContext.name()}\n    value={context.value()}\n    required={formControlContext.isRequired()}\n    disabled={formControlContext.isDisabled()}\n    readonly={formControlContext.isReadOnly()}\n    aria-label={fieldProps.ariaLabel()}\n    aria-labelledby={fieldProps.ariaLabelledBy()}\n    aria-describedby={fieldProps.ariaDescribedBy()}\n    aria-invalid={formControlContext.validationState() === \"invalid\" || void 0}\n    aria-required={formControlContext.isRequired() || void 0}\n    aria-disabled={formControlContext.isDisabled() || void 0}\n    aria-readonly={formControlContext.isReadOnly() || void 0}\n    onInput={composeEventHandlers([local.onInput, context.onInput])}\n    {...formControlContext.dataset()}\n    {...others}\n  />;\n}\n\n// src/text-field/text-field-root.tsx\nimport {\n  access,\n  createGenerateId,\n  mergeDefaultProps as mergeDefaultProps2,\n  mergeRefs\n} from \"@kobalte/utils\";\nimport { createUniqueId, splitProps as splitProps2 } from \"solid-js\";\nfunction TextFieldRoot(props) {\n  let ref;\n  const defaultId = `textfield-${createUniqueId()}`;\n  const mergedProps = mergeDefaultProps2(\n    { id: defaultId },\n    props\n  );\n  const [local, formControlProps, others] = splitProps2(\n    mergedProps,\n    [\"ref\", \"value\", \"defaultValue\", \"onChange\"],\n    FORM_CONTROL_PROP_NAMES\n  );\n  const [value, setValue] = createControllableSignal({\n    value: () => local.value,\n    defaultValue: () => local.defaultValue,\n    onChange: (value2) => local.onChange?.(value2)\n  });\n  const { formControlContext } = createFormControl(formControlProps);\n  createFormResetListener(\n    () => ref,\n    () => setValue(local.defaultValue ?? \"\")\n  );\n  const onInput = (e) => {\n    if (formControlContext.isReadOnly() || formControlContext.isDisabled()) {\n      return;\n    }\n    const target = e.target;\n    setValue(target.value);\n    target.value = value() ?? \"\";\n  };\n  const context = {\n    value,\n    generateId: createGenerateId(() => access(formControlProps.id)),\n    onInput\n  };\n  return <FormControlContext.Provider value={formControlContext}><TextFieldContext.Provider value={context}><Polymorphic\n    as=\"div\"\n    ref={mergeRefs((el) => ref = el, local.ref)}\n    role=\"group\"\n    id={access(formControlProps.id)}\n    {...formControlContext.dataset()}\n    {...others}\n  /></TextFieldContext.Provider></FormControlContext.Provider>;\n}\n\n// src/text-field/text-field-text-area.tsx\nimport {\n  composeEventHandlers as composeEventHandlers2,\n  mergeDefaultProps as mergeDefaultProps3,\n  mergeRefs as mergeRefs2\n} from \"@kobalte/utils\";\nimport {\n  createEffect,\n  on,\n  splitProps as splitProps3\n} from \"solid-js\";\nfunction TextFieldTextArea(props) {\n  let ref;\n  const context = useTextFieldContext();\n  const mergedProps = mergeDefaultProps3(\n    {\n      id: context.generateId(\"textarea\")\n    },\n    props\n  );\n  const [local, others] = splitProps3(mergedProps, [\n    \"ref\",\n    \"autoResize\",\n    \"submitOnEnter\",\n    \"onKeyPress\"\n  ]);\n  createEffect(\n    on(\n      [() => ref, () => local.autoResize, () => context.value()],\n      ([ref2, autoResize]) => {\n        if (!ref2 || !autoResize) {\n          return;\n        }\n        adjustHeight(ref2);\n      }\n    )\n  );\n  const onKeyPress = (event) => {\n    if (ref && local.submitOnEnter && event.key === \"Enter\" && !event.shiftKey) {\n      if (ref.form) {\n        ref.form.requestSubmit();\n        event.preventDefault();\n      }\n    }\n  };\n  return <TextFieldInputBase\n    as=\"textarea\"\n    aria-multiline={local.submitOnEnter ? \"false\" : void 0}\n    onKeyPress={composeEventHandlers2([local.onKeyPress, onKeyPress])}\n    ref={mergeRefs2((el) => ref = el, local.ref)}\n    {...others}\n  />;\n}\nfunction adjustHeight(el) {\n  const prevAlignment = el.style.alignSelf;\n  const prevOverflow = el.style.overflow;\n  const isFirefox = \"MozAppearance\" in el.style;\n  if (!isFirefox) {\n    el.style.overflow = \"hidden\";\n  }\n  el.style.alignSelf = \"start\";\n  el.style.height = \"auto\";\n  el.style.height = `${el.scrollHeight + (el.offsetHeight - el.clientHeight)}px`;\n  el.style.overflow = prevOverflow;\n  el.style.alignSelf = prevAlignment;\n}\n\n// src/text-field/index.tsx\nvar TextField = Object.assign(TextFieldRoot, {\n  Description: FormControlDescription,\n  ErrorMessage: FormControlErrorMessage,\n  Input: TextFieldInput,\n  Label: FormControlLabel,\n  TextArea: TextFieldTextArea\n});\n\nexport {\n  TextFieldInput,\n  TextFieldRoot,\n  TextFieldTextArea,\n  TextField,\n  text_field_exports\n};\n"],"names":["text_field_exports","__export","Description","FormControlDescription","ErrorMessage","FormControlErrorMessage","Input","TextFieldInput","Label","FormControlLabel","Root","TextFieldRoot","TextArea","TextFieldTextArea","TextField","TextFieldContext","createContext","useTextFieldContext","context","useContext","Error","props","_$createComponent","TextFieldInputBase","_$mergeProps","type","formControlContext","useFormControlContext","mergedProps","mergeDefaultProps","id","generateId","local","formControlFieldProps","others","splitProps","FORM_CONTROL_FIELD_PROP_NAMES","fieldProps","createFormControlField","Polymorphic","as","name","value","required","isRequired","disabled","isDisabled","readonly","isReadOnly","ariaLabel","ariaLabelledBy","ariaDescribedBy","validationState","onInput","composeEventHandlers","dataset","ref","defaultId","createUniqueId","mergeDefaultProps2","formControlProps","splitProps2","FORM_CONTROL_PROP_NAMES","setValue","createControllableSignal","defaultValue","onChange","value2","createFormControl","createFormResetListener","e","target","createGenerateId","access","FormControlContext","Provider","children","r$","_ref$","mergeRefs","el","role","mergeDefaultProps3","splitProps3","createEffect","on","autoResize","ref2","adjustHeight","onKeyPress","event","submitOnEnter","key","shiftKey","form","requestSubmit","preventDefault","composeEventHandlers2","_ref$2","mergeRefs2","prevAlignment","style","alignSelf","prevOverflow","overflow","height","scrollHeight","offsetHeight","clientHeight","Object","assign"],"mappings":"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","x_google_ignoreList":[0]}